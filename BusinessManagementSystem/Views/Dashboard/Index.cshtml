@{
    var AppointmentSegregationLoginEmployee = ViewBag.DashboardInfo["AppointmentSegregationLoginEmployee"].Dynamic_Datas;
    var boxColors = new List<string> { "bg-info", "bg-warning", "bg-maroon", "bg-success" }; // Define your colors
    int index1 = 0; // Initialize an index for cycling through colors
    int index2 = 0;
}
<div class="row">
    <div class="col-md-12">
        <div class="card-body">
            <partial name="_DateRangeFilter" />
        </div>
    </div>
    @if (User.IsInRole("superadmin") || User.IsInRole("admin_tattoo"))
    {
        var AppointmentSegregationAllEmployee = ViewBag.DashboardInfo["AppointmentSegregationAllEmployee"].Dynamic_Datas;
        <div class="col-md-12">
            <div class="card card-outline card-dark">
            <div class="card-header">
                <h3 class="card-title">All Appointments</h3>
            </div>
            <div class="card-body">
                <div class="row">
                        @foreach (var item in AppointmentSegregationAllEmployee)
                        {
                            var colorClass = boxColors[index2 % boxColors.Count]; // Cycle through the colors
                            index2++; // Increment the index
                            <div class="col-lg-3 col-6">
                                <!-- small box -->
                                <div class="small-box @colorClass">
                                    <div class="inner">
                                        <h3>@item.Count</h3>
                                        <p>@item.StatusGroup</p>
                                    </div>
                                    <div class="icon">
                                        <i class="ion ion-pie-graph"></i>
                                    </div>
                                    <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                                </div>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
    }
    <div class="col-md-12">
        <div class="card card-outline card-dark">
            <div class="card-header">
                <h3 class="card-title">My Appointments</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var item in AppointmentSegregationLoginEmployee)
                    {
                        var colorClass = boxColors[index1 % boxColors.Count]; // Cycle through the colors
                        index1++; // Increment the index
                        <div class="col-lg-3 col-6">
                            <!-- small box -->
                            <div class="small-box @colorClass">
                                <div class="inner">
                                    <h3>@item.Count</h3>
                                    <p>@item.StatusGroup</p>
                                </div>
                                <div class="icon">
                                    <i class="ion ion-pie-graph"></i>
                                </div>
                                <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div id="incomeSegregationContainer" style="height: 370px;"></div>
    </div>
    <div class="col-md-9">
        <div id="paymentAndTipsSegregationContainer" style="height: 370px;"></div>
    </div>
</div>


@section Scripts {
    <script>
        window.onload = function () {
            



            var incomeSegregationChart = new CanvasJS.Chart("incomeSegregationContainer", {
                theme: "light2", // "light1", "light2", "dark1", "dark2"
                animationEnabled: true,
                title: {
                    text: "Income Segregation"
                },
                data: [{
                    type: "pie",
                    startAngle: 180,
                    toolTipContent: "<b>{label}</b>: {y}",
                    legendText: "{label}",
                    indexLabel: "{label} - {y}",
                    dataPoints: @Html.Raw(ViewBag.DashboardInfo["DataPointsIncomeSegregation"])
                }]
            });
            var paymentAndTipsSegregationChart = new CanvasJS.Chart("paymentAndTipsSegregationContainer", {
                animationEnabled: true,
                title: {
                    text: "Payment and Tips"
                },
                toolTip: {
                    shared: true
                },
                axisY: {
                    title: "Income"
                },
                legend: {
                    cursor: "pointer",
                    verticalAlign: "center",
                    horizontalAlign: "right",
                    itemclick: toggleDataSeries
                },
                data: [
                    {
                        type: "stackedColumn",
                        name: "Payment",
                        dataPoints: @Html.Raw(ViewBag.DashboardInfo["DataPointsPaymentSegregation"])
                    },
                    {
                        type: "stackedColumn",
                        name: "Tips",
                        dataPoints: @Html.Raw(ViewBag.DashboardInfo["DataPointsTipSegregation"])
                    }
                ]
            });
            incomeSegregationChart.render();
            paymentAndTipsSegregationChart.render();
            function toggleDataSeries(e) {
                if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                }
                else {
                    e.dataSeries.visible = true;
                }
                paymentAndTipsSegregationChart.render();
            }
        }
        
    </script>
}

